#include "comm.h"#include <Serial.h>typedef struct {	char	string[6];	int		value;	int		state;} configInfo;configInfo configTable[] = {	{ "300",	 	baud300,	1	},	{ "600",	 	baud600,	0	},	{ "1200",	 	baud1200,	0	},	{ "1800",	 	baud1800,	0	},	{ "2400",	 	baud2400,	0	},	{ "3600",	 	baud3600,	0	},	{ "4800",	 	baud4800,	0	},	{ "7200",	 	baud7200,	0	},	{ "9600",	 	baud9600,	0	},	{ "19200",	 	baud19200,	0	},	{ "38400",	 	baud38400,	0	},	{ "57600",	 	baud57600,	0	},	{ "n",	 		noParity,	2	},	{ "o",	 		oddParity,	0	},	{ "e",	 		evenParity,	0	},	{ "5",	 		data5,		3	},	{ "6",	 		data6,		0	},	{ "7",	 		data7,		0	},	{ "8",	 		data8,		0	},	{ "1",	 		stop10,		4	},	{ "1.5",	 	stop15,		0	},	{ "2",	 		stop20,		0	}};// Decodes a serial port configuration string into an integer// suitable for a call to SerReset (see Inside Mac II-250).// // The string is in standard DOS format: (baud rate, parity, //   #data bits, #stop bits). //int decodeConfigStr( char *string ){	char	*str;	int 	matches = 0;	int		config = 0;	int		i;	for( i=0; i<sizeof(configTable)/sizeof(configInfo); i++ ) {			switch( configTable[i].state ) {						case 1:									// baud				str = strtok( string, ";, " );				break;					case 2:									// parity			case 3:									// data size				str = strtok( NULL, ";, " );				str[0] = tolower( str[0] );			// for parity 				break;					case 4:									// stop bits				str = strtok( NULL, " " );				break;		}			if( strcmp( str, configTable[i].string ) == 0 ) {			config += configTable[i].value;			matches++;		}	}	if( matches != 4 ) {		config = 0;	}		return config;}