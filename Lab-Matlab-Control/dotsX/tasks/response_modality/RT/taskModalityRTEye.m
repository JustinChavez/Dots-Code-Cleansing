function index_ = taskModalityRTEye(varargin)
%RT Dots task with diagonal motion and up-down eye movements
%
%   index_ = taskModalityRTEye(varargin)
%
%   asl eye tracker for fixation
%   eye tracker for choices
%
%   index_ specifies the new instance in ROOT_STRUCT.dXtask

% copyright 2008 Benjamin Heasly University of Pennsylvania

% which dot direction corresponds to an upward eye response?
if nargin>1 && ischar(varargin{1}) && strcmp(varargin{1}, 'dotParams') ...
        && isstruct(varargin{2})

    arg_dot = {'down-up', varargin{2}};
    varargin(1:2) = [];
else
    arg_dot = {'down-up', []};
end

% name of this task
name = mfilename;

% actions specific to eye movement task
respond = { ...
    'dXkbHID',  {'any', 'error'}; ...
    'dXPMDHID', {'any', 'error'}; ...
    'dXasl',    {[2,false,inf], 'choose', true}};
choose = { ...
    'dXkbHID',  {'any', 'error'}; ...
    'dXPMDHID', {'any', 'error'}; ...
    'dXasl',    {[3,true,inf], 'down', [4,true,inf], 'up', true}};
down = { ...
    'dXkbHID',  {'any', 'error'}; ...
    'dXPMDHID', {'any', 'error'}; ...
    'dXasl',    {[3,false,inf], 'down', true}};
up = { ...
    'dXkbHID',  {'any', 'error'}; ...
    'dXPMDHID', {'any', 'error'}; ...
    'dXasl',    {[4,false,inf], 'up', true}};
left = {};
right = {};

% time to make a saccade
post = 100;

% Eye task uses two targets
targets = {'dXtarget', 3:4};

% customize the statelist for eye movements
arg_statelist = {respond, choose, up, down, left, right, post, targets};

% get general task settings for modality tasks
arg_dXtask = modality_task_args;

% create this specific task
index_ = rAdd('dXtask', 1, {'root', false, true, false}, ...
    'name',         name(5:end), ...
    'blockReps',    100, ...
    'timeLimit',    7*60, ...
    'intertrialFcn',{@speedAccuracyFeedback}, ...
    'helpers',      { ...
            'gXmodality_hardware',          1,  true,	{}; ...
            'gXmodality_graphics',          1,  true,	arg_dot; ...
            'gXmodality_motionControl',     1,  false,	arg_dot; ...
            'gXmodalityRT_statelist',       1,  false,	arg_statelist; ...
            }, ...
    arg_dXtask{:}, varargin{:});