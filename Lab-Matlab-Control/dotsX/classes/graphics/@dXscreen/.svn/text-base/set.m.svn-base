function g_ = set(g_, varargin)%set method for class dXscreen: specify property values and recompute dependencies%   g_ = set(g_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for dXgraphics class.%-% Assigns properties to a dXgraphics object,%-%   sets up the screen and returns the updated object.%-% Set up depends on 'screenMode' property:%-%   - 'local' (default) ... uses psychtoolbox 'Screen'%-%       to open a drawing window on local machine.%-%       ROOT_STRUCT.windowNumber stores the open window #.%-%   - 'debug' ... does nothing.%-%       ROOT_STRUCT.windowNumber stores (flag) -1%-%   - 'remote' ... opens connection ****%----------Special comments-----------------------------------------------%%   See also set dXscreen% Copyright 2005 by Joshua I. Gold%   University of Pennsylvaniaglobal ROOT_STRUCT%%%% loop through the arglist, setting propertiesfor i = 1:2:nargin-1    g_.(varargin{i}) = varargin{i+1};end%%%% if we are going to be but are not already in LOCAL mode, set%   it up.if strcmp(g_.screenMode, 'local') && ROOT_STRUCT.screenMode ~= 1    % enable/disable warnings    if g_.showWarnings        Screen('Preference', 'SkipSyncTests', 0);    else        Screen('Preference', 'SkipSyncTests', 1);    end    % open a new window or get info about an existing window    legitPtrs = Screen('Windows');    wini      = strcmp(varargin, 'windowNumber');        if any(wini) && ~isempty(legitPtrs) && any(legitPtrs == g_.windowNumber)        % get available info about the existing Screen window        %   bg color and num buffers are unavailable        g_.screenRect   = Screen('Rect', g_.windowNumber);        g_.screenNumber = Screen('WindowScreenNumber', g_.windowNumber);        g_.pixelSize    = Screen('PixelSize', g_.windowNumber);    else        % open new window        [g_.windowNumber, g_.screenRect] = ...            Screen('OpenWindow', ...            g_.screenNumber, ...            g_.bgColor, ...            g_.openRect, ...            g_.pixelSize, ...            g_.numberOfBuffers, ...            0, ...            g_.multiSampling);    end    % set priority    if g_.priority ~= 0        Priority(g_.priority);    end    % Hide the cursor if there is only one screen or if    % the hideCursor flag is not set    if g_.hideCursor        HideCursor;    end    % measure frame rate if not given by Screen    if g_.frameRate == 0        num = 100;        ivl = zeros(num, 1);        for i = 1:num            tic            Screen('Flip', g_.windowNumber);            ivl(i) = toc;        end        g_.frameRate = round(1/mean(ivl));    end    % load Bits++ gamma table?    if g_.loadGammaBitsPlus        g_.gamma8bitOld = Screen('LoadNormalizedGammaTable', ...            g_.windowNumber, g_.gammaBitsPlus);    end    % load a calibrated gamma table?    if g_.loadGamma8bit        g_.gamma8bitOld = Screen('LoadNormalizedGammaTable', ...            g_.windowNumber, g_.gamma8bit);    end    %BSH wants to enable blending so that he can mask dots with a texture,    %rather than a stencil, and use PTB out of the box    Screen('BlendFunction', g_.windowNumber, ...        GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);elseif ~strcmp(g_.screenMode, 'local') && ROOT_STRUCT.screenMode == 1    % If we are already in local mode but will not be, call    %   root method with 'clear' flag    g_ = root(g_, 'clear');end%%%%% Case on current screenMode propertyif strcmp(g_.screenMode, 'remote')    % SCREEN MODE = 2    % try to add dXudp object; if it is not created,    %   switch to debug mode    ROOT_STRUCT.screenMode = 2;    % look for or start dXudp    if any(strcmp('dXudp', ROOT_STRUCT.classes.names)) || ...            ~isempty(rAdd('dXudp', 1))        % in remote mode, get attributes from        %   remote machine        if g_.windowNumber == -1            [g_.windowNumber, g_.screenRect, ...                g_.pixelsPerDegree, g_.frameRate] = ...                rRemoteSetup(g_.monitorWidth, g_.viewingDistance);        end    else        % Bailout ... set debug mode        disp('dXscreen/set: dXudp not initialized, entering debug mode')        g_.screenMode = 'debug';    endendif strcmp(g_.screenMode, 'debug')    % SCREEN MODE = 0    g_.windowNumber = -1;    g_.screenRect = ROOT_STRUCT.classes.dXscreen.defaults.screenRect;    g_.pixelsPerDegree = ROOT_STRUCT.classes.dXscreen.defaults.pixelsPerDegree;    ROOT_STRUCT.screenMode = 0;elseif strcmp(g_.screenMode, 'local')    % SCREEN MODE = 1    ROOT_STRUCT.screenMode   = 1;    % if we have two buffers, flip twice to blank    if g_.numberOfBuffers == 2        g_.flipMode = true;        Screen('Flip', g_.windowNumber);        Screen('Flip', g_.windowNumber);    else        error('Huh? Wha? Use two buffers, whoopiedoopie')    end    % compute pixelsPerDegree    if ~isempty(g_.screenRect)        g_.pixelsPerDegree = g_.screenRect(3) * ...            (1 ./ (2 * atan2(g_.monitorWidth / 2, ...            g_.viewingDistance))) * pi/180;    endend% set global copy of windowNumberROOT_STRUCT.windowNumber = g_.windowNumber;% when background color changes, resolve the value and blank the windowif any(strcmp(varargin, 'bgColor'))    switch g_.screenMode        case 'debug'            % resolve color to rgb triple            g_.bgColor = rGraphicsGetRGB(g_.bgColor, struct(g_));        case 'local'            % resolve color to rgb triple            g_.bgColor = rGraphicsGetRGB(g_.bgColor, struct(g_));            % update bgColor for Psychtoolbox text            Screen('TextBackgroundColor', ...                g_.windowNumber, clutX(g_.bgColor));            % local background change            g_ = blank(g_);        case 'remote'            % remote bg change            sendMsgH(sprintf('rSet(''dXscreen'',1%s);', ...                args2String({'bgColor', g_.bgColor})));    endend