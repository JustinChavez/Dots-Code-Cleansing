function t_ = set(t_, varargin)%set method for class dXtarget: specify property values and recompute dependencies%   t_ = set(t_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for class dXtarget%-%%-% Assigns properties to 'target' object(s)%-% and returns the updated object(s)%----------Special comments-----------------------------------------------%%   See also set dXtarget% Copyright 2004 by Joshua I. Gold%   University of Pennsylvania% set the fields, one at a time.. no error checkingif length(t_) == 1    % set one object    for ii = 1:2:nargin-1        t_.(varargin{ii}) = varargin{ii+1};    endelse    % set many objects  ... a cell means separate    %   values given for each object; otherwise    %   the same value is set for all objects    inds=ones(size(t_));    for ii = 1:2:nargin-1        % change it        if iscell(varargin{ii+1}) && ~isempty(varargin{ii+1})            [t_.(varargin{ii})] = deal(varargin{ii+1}{:});        else            [t_.(varargin{ii})] = deal(varargin{ii+inds});        end    endend% quick loop to check/update visible and color propertiesfor ii = 1:length(t_)    % check that any diameter is < 0; if so, set 'visible' to false    % also make sure visible is boolean    if t_(ii).diameter <= 0 || t_(ii).visible < 1        t_(ii).visible = false;    else        t_(ii).visible = true;    end    % resolve pointer or lumanance to rgb triple    t_(ii).color = rGraphicsGetRGB(t_(ii).color);end% quick exitif nargin == 3 && strcmp(varargin{1}, 'visible') && ...        ~isempty(t_(1).drawRect)    returnend% compute the drawRects relative to the center of the screend_ppd = vertcat(t_.diameter)*t_(1).pixelsPerDegree;x0	  = t_(1).sr(1)+vertcat(t_.x).*t_(1).pixelsPerDegree-0.5*d_ppd;y0    = t_(1).sr(2)-vertcat(t_.y).*t_(1).pixelsPerDegree-0.5*d_ppd;drect = [x0 y0 (x0 + d_ppd) (y0 + d_ppd)];for ii = 1:length(t_)    t_(ii).drawRect = drect(ii,:);              % add draw rectend