function [ts_, attributes_, batchMethods_] = dXtargets(num_objects)% function [ts_, attributes_, batchMethods_] = dXtargets(num_objects)%% Constructor method for class dXtargets%% Arguments:%   num_objects   ... number of objects to create%% Output:%   ts_           ... array of created dXtargets%   attributes_   ... default object attributes%   batchMethods_ ... methods that can be run in a batch (e.g., draw)% Copyright 2004 by Joshua I. Gold%   University of Pennsylvania% get screen attributes[wn, sr, ppd, fr] = rGraphicsGetScreenAttributes;% default object attributesattributes = { ...        % name			type		ranges(?)	default        'visible',          'boolean',	[],		false;	...        'x',                'array',	[],		0;		...        'y',                'array',	[],		0;		...        'diameter',         'array',	[],		.5;		...        'diameter2',        'array',	[],		0;		...        'cmd',              'array',    [],     0;      ... %0=fillOval,1=frameOval,2=fillRect,3=frameRect        'penWidth',         'array',    [],     1;      ...        'color',            'array',	[],		[255,0,0]; ...        'windowNumber',     'auto',     [],     wn;     ...        'screenRect',       'auto',     [],     sr;     ...        'sr',               'auto',     [],     sr(3:4)./2; ...        'pixelsPerDegree',  'auto',     [],     ppd;    ...        'drawRect',         'auto',		[],		[]; 	...        'frameRate',        'auto',     [],     [];     ...        'tag',              'auto',	    [],		0};             % ignored% make an array of objects from structs made from the attributest = cell2struct(attributes(:,4), attributes(:,1), 1);for i = 1:num_objects    ts_(i) = class(t, 'dXtargets');end% return the attributes, if necessaryif nargout > 1    attributes_ = attributes;endif nargout > 2    batchMethods_ = {'draw', 'blank'};end