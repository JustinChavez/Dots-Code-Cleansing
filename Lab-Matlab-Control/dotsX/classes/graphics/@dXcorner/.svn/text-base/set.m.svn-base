function c_ = set(c_, varargin)%set method for class dXcorner: specify property values and recompute dependencies%   c_ = set(c_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for class dXcorner%-%%-% Assigns properties to 'corner' object(s)%-% and returns the updated object(s)%----------Special comments-----------------------------------------------%%   See also set dXcorner% Copyright 2006 by Joshua I. Gold%   University of Pennsylvania% set the fields, one at a time.. no error checkingif length(c_) == 1    % set one object    for ii = 1:2:nargin-1        c_.(varargin{ii}) = varargin{ii+1};    endelse        % set many objects  ... a cell means separate    %   values given for each object; otherwise    %   the same value is set for all objects    inds=ones(size(c_));        for ii = 1:2:nargin-1        % change it        if iscell(varargin{ii+1}) && ~isempty(varargin{ii+1})            [c_.(varargin{ii})] = deal(varargin{ii+1}{:});        else            [c_.(varargin{ii})] = deal(varargin{ii+inds});        end    endend% check/update visible and color propertiesfor ii = 1:length(c_)    % check that any diameter is < 0; if so, set 'visible' to false    % also make sure visible is boolean    if c_(ii).size <= 0 || c_(ii).visible < 1        c_(ii).visible = false;    else        c_(ii).visible = true;    end        % resolve pointer or lumanance to rgb triple    c_(ii).color = rGraphicsGetRGB(c_(ii).color);end% special cases of only 'visible' value set, %   don't go through the restif nargin == 3 && ~isempty(c_(1).drawRect) && ...        strcmp(varargin{1}, 'visible')    returnend% compute the drawRects, make sure 'visible' value is logicalsr = c_(1).screenRect;for ii = 1:length(c_)     sz = c_(ii).size * c_(ii).pixelsPerDegree;    switch c_(ii).location        case 1            c_(ii).drawRect = [sr(1:2) sr(1:2)+sz];        case 2            c_(ii).drawRect = [sr(3)-sz sr(2) sr(3) sr(2)+sz];        case 3            c_(ii).drawRect = [sr(3:4)-sz sr(3) sr(4)];        otherwise            c_(ii).drawRect = [sr(1) sr(4)-sz sr(1)+sz sr(4)];    endend