function l_ = set(l_, varargin)%set method for class dXline: specify property values and recompute dependencies%   l_ = set(l_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for class dXline%-%%-% Assigns properties to 'dXline' object(s)%-% and returns the updated object(s)%----------Special comments-----------------------------------------------%%   See also set dXline% Copyright 2004 by Joshua I. Gold%   University of Pennsylvania% set the fields, one at a time..if length(l_) == 1    % set one object    for ii = 1:2:nargin-1        l_.(varargin{ii}) = varargin{ii+1};    endelse    % set many objects  ... a cell means separate    %   values given for each object; otherwise    %   the same value is set for all objects    inds=ones(size(l_));    for ii = 1:2:nargin-1        % change it        if iscell(varargin{ii+1}) && ~isempty(varargin{ii+1})            [l_.(varargin{ii})] = deal(varargin{ii+1}{:});        else            [l_.(varargin{ii})] = deal(varargin{ii+inds});        end    endend% I can't believe this is the best I can do. I suck.pp = [[l_.x1]; [l_.y1]; [l_.x2]; [l_.y2]] .* l_(1).pixelsPerDegree;pp([1 3],:)      = l_(1).screenRect(3)/2 + pp([1 3],:);pp([2 4],:)      = l_(1).screenRect(4)/2 - pp([2 4],:);% as long as we're sucking, loop and get it over with.for ii = 1:length(l_)    % each position rect is a column of pp.    l_(ii).pixPosition = pp(:,ii);        % make all 'visible' values logica    l_(ii).visible = logical(l_(ii).visible);        % resolve color pointer or lumanance to rgb triple    l_(ii).color = rGraphicsGetRGB(l_(ii).color);end