function [vt_, attributes_, batchMethot_] = dXvirtualTexture(num_objects)% function [vt_, attributes_, batchMethot_] = dXvirtualTexture(num_objects)%% Constructor method for class dots% Input:%   num_objects     ... number of objects to create%% Output:%   vt_              ... array of created texture instances%   attributes_     ... default object attributes%   batchMethot_    ... methods that can be run in a batch (e.g., draw)% Copyright 2007 by Benjamin Heasly%   University of Pennsylvania% get screen values[wn, sr, ppd, fr] = rGraphicsGetScreenAttributes;% GLSL stands for OpenGL Shading Language.  It provides a way of making% virtual textures--textures that are defined by a function and computed on% the fly, as opposed to normal textures that are defined by a static% image.%% Every dXvirtualTexture needs a file, in its GLSLFragment property that% contains a suitable function written in GLSL.%% The parameters of that function can be modified on the fly, which makes% virtual textures really powerful!  You could, for example, animate a% Gabor patch in real time.  To do that kind of thing, you need to know the% names of the variables used in the GLSL function (you probably do,% because you probably wrote it!).%% Then you can use these dXvirtualTexture methods:%   dXvirtualTexture/getGLSLValue%   dXvirtualTexture/setGLSLValue% to access and change the parameters you want.  dXvirtualTexture will keep% track of the memory locations of each parameter.% get path to directory of GLSL shaders (virtual texture definitions)[defDir,n,e,v] = fileparts(mfilename('fullpath'));fis            = strfind(defDir, filesep);defDir         = [defDir(1:fis(end)) 'GLSLShaders' filesep];% default object attributesattributes = { ...    % name              type		values	default    'file',             'string',   [],     '';     ... % GLSL fragment shader    'dir',              'string',   [],     defDir; ... % path to shader    'x',                'scalar',	[],		0;		... % deg vis angle    'y',                'scalar',	[],		0;		... % deg vis angle    'w',                'scalar',	[],		10.0;   ... % deg vis angle    'h',                'scalar',	[],		10.0;   ... % deg vis angle    'GLSLDebugMode',    'boolean',  [],     false;  ... % get extra PTB ouput    'GLSLArgs',         'cell',     [],     {};     ... % GLSL {param,val...}    'sourceRect',       'array',    [],     [];     ... % [x1,y1,x2,y2] pix    'rotation',         'scalar',   [],     0;      ... % deg rotation    'filterMode',       'scalar',   [],     1;      ... % bilinear filter    'globalAlpha',      'scalar',   [],     1;      ... % blending opacity    'modulateColor',    'array',    [],     [];     ... % drawtime color change    'visible',          'boolean',	[],		0;		...    'tag',              'scalar',	[],		0;      ... % ignored    'windowNumber',     'auto',     [],     wn;     ...    'screenRect',       'auto',     [],     sr;     ...    'pixelsPerDegree',  'auto',     [],     ppd;    ...    'frameRate',        'auto',     [],     fr;     ...    'drawRect',         'auto',     [],     [];     ... % where drawn    'GLSLProgram',      'auto',     [],     [];     ...    'GLSLLocations',    'auto',     [],     [];     ...    'texture',          'auto',     [],     []};% make an array of objects from structs made from the attributesd = cell2struct(attributes(:,4), attributes(:,1), 1);for i = 1:num_objects    vt_(i) = class(d, 'dXvirtualTexture');end% return the attributes, if necessaryif nargout > 1    attributes_ = attributes;end% return list of batch methodsif nargout > 2    batchMethot_ = {'draw', 'blank'};end