function p_ = set(p_, varargin)%set method for class dXparadigm: specify property values and recompute dependencies%   p_ = set(p_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for dXparadigm class.%-%%-% If there's a dXparadigm GUI open, enqueues changes for dXGUI_sync to display.%----------Special comments-----------------------------------------------%%   See also set dXparadigm% Copyright 2005 by Benjamin Heasly at University of Pennsylvania% When ROOT- or FIRA_writeInterval changes, recompute SAME_nextWriteargi = find(strcmp(varargin(1:2:end), 'ROOT_writeInterval'))*2-1;if ~isempty(argi)    % Subtract the old and add the new / Correctamundo, whooptiedoo!    p_.ROOT_nextWrite = p_.ROOT_nextWrite - p_.ROOT_writeInterval + varargin{argi(end)+1};endargi = find(strcmp(varargin(1:2:end), 'FIRA_writeInterval'))*2-1;if ~isempty(argi)    % Subtract the old and add the new / Correctamundo, whooptiedoo!    p_.FIRA_nextWrite = p_.FIRA_nextWrite - p_.FIRA_writeInterval + varargin{argi(end)+1};end% is there a GUI what needs info about changes??if p_.paradigmGUI    for ii = 1:2:nargin-1        % Loop through the arglist, setting properties        p_.(varargin{ii}) = varargin{ii+1};        % Also enqueue param/value pairs for dXGUI_sync,        %   allow only one queue entry per dXparadigm field        qi = find(strcmp(p_.GUISetQueue(1:2:end), varargin{ii}))*2;        if isempty(qi)            p_.GUISetQueue = cat(2,p_.GUISetQueue, varargin(ii:ii+1));        else            p_.GUISetQueue(qi-1:qi) = varargin(ii:ii+1);        end    endelse    for ii = 1:2:nargin-1        % Loop through the arglist, setting properties        p_.(varargin{ii}) = varargin{ii+1};    endend% goof fixerif ischar(p_.taskList)    p_.taskList = {p_.taskList};end% implement change in screen modeif any(strcmp(varargin, 'screenMode'))    rSet('dXscreen', 1, 'screenMode', p_.screenMode);end