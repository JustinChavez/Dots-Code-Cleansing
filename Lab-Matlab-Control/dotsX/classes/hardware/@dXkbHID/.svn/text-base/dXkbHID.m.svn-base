function [k_, attributes_, batchMethods_] = dXkbHID(varargin)% function [k_, attributes_, batchMethods_] = dXkbHID(varargin)%% Constructor method for class dXkbHID%% Input:%   first arg is ignored (init flag)%   second arg is flag to init FIRA for dXkbHID data%% Output:%   k_            ... created object%   attributes_   ... default object attributes%   batchMethods_ ... methods that can be run in batches (e.g., query)% Copyright 2005 by Joshua I. Gold%   University of Pennsylvaniaglobal ROOT_STRUCT% look for mex functionavailable = exist('HIDx', 'file');if isfield(ROOT_STRUCT, 'dXkbHID') || ~available    k_            = [];    attributes_   = [];    batchMethods_ = [];    returnend% how to find a compatible HID device%   see fields returned by d = HIDx('scan')d                     = HIDx('scan');HIDCriteria.usageName = 'Keyboard';k_index               = strmatch('Keyboard', {d.usageName});if length(k_index) == 1    % found one keyboard, use it    HIDCriteria.vendorID  = d(k_index).vendorID;else    % else, try to use known vendor ID    vendors = [d(k_index).vendorID];    if any(vendors==1452)        % Apple        HIDCriteria.vendorID  = 1452;    elseif any(vendors==3690)        % Microsoft?        HIDCriteria.vendorID  = 3690;    else        % whatever        HIDCriteria.vendorID = vendors(1);    endend% default object attributesattributes = { ...    % name			type        ranges(?) default    'available',    'boolean',  [],         available; ...    'active',       'boolean',  [],         false; ...    'FIRAdataType', 'string',   [],         'kbdData'; ...    'HIDClass',     'string',   [],         'dXkbHID'; ...    'HIDCriteria',  'struct',   [],         HIDCriteria; ...    'HIDIndex',     'scalar',   [],         nan;     ...    'HIDDeviceInfo','struct',   [],         [];     ...    'HIDElementsInfo','struct', [],         [];     ...    'freq',         'scalar',   [],         1000;	...    'timeOut',      'scalar',   [],         0;      ...    'mappings',     'cell',     [],         [];     ...    'default',      'auto',     [],         [];     ...    'other',        'auto',     [],         [];     ...    'checkList',    'auto',     [],         [];     ...    'checkRet',     'auto',     [],         [];     ...    'offsetTime',   'auto',     [],         0;      ...    'lastString',	'auto',     [],         [];     ...    'values',       'auto',     [],         [];     ...    'recentVal',    'auto',     [],         1};% make an array of objects from structs made from the attributesk_ = class(cell2struct(attributes(:,4), attributes(:,1), 1), 'dXkbHID');% return the attributes, if necessaryif nargout > 1    attributes_ = attributes;end% return list of batch methodsif nargout > 2    batchMethods_ = {'reset', 'saveToFIRA', 'root', 'getJump'};end