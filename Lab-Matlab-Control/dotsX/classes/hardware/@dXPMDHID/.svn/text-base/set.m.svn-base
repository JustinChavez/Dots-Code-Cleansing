function p_ = set(p_, varargin)%set method for class dXPMDHID: specify property values and recompute dependencies%   p_ = set(p_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% assigns properties to an dXPMDHID object%-% and returns the updated object%-% Like other standard "set" methods, expects parameter-value%-% pairs in a cell array.%----------Special comments-----------------------------------------------%%   See also set dXPMDHID% Copyright 2005 by Joshua I. Gold%   University of Pennsylvania% set the fields, one at a time..  no error checking, dudefor i = 1:2:nargin-1    p_.(varargin{i}) = varargin{i+1};end% check active flag before starting mex functionif any(strcmp(varargin, 'active')) && p_.available    if p_.active        [p_.HIDIndex, p_.HIDDeviceInfo, p_.HIDElementsInfo] = ...            HIDx('add', p_.HIDClass, 1, p_.HIDCriteria, p_.HIDChannelizer);    else        p_.HIDIndex = HIDx('remove', p_.HIDIndex);    end    p_.active = ~isnan(p_.HIDIndex);end% if new mappings come in through set, work them outif ~isempty(p_.mappings)    p_ = putMap(p_, p_.mappings);    p_.mappings = [];end% reset and load the scan queueif p_.active && ~isempty(p_.loadID) && ~isempty(p_.loadReport) ...        && isa(p_.loadReport, 'uint8')    HIDx('setReport', p_.HIDIndex, p_.loadID, p_.loadReport);end% don't start scanning until reset()% if p_.active && ~isempty(p_.startID) && ~isempty(p_.startReport) ...%         && isa(p_.startReport, 'uint8')%     HIDx('setReport', p_.HIDIndex, p_.startID, p_.startReport);% end