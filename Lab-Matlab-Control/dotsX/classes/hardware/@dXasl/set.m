function a_ = set(a_, varargin)%set method for class dXasl: specify property values and recompute dependencies%   a_ = set(a_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% assigns properties to a 'dXasl' object%-% and returns the updated object%-% Like other standard "set" methods, expects values%-% to be cells.%----------Special comments-----------------------------------------------%%   See also set dXasl% Copyright 2005 by Joshua I. Gold%   University of Pennsylvania% save current active stateactive = a_.active;% set the fields, one at a time..  no error checkingfor ii = 1:2:nargin-1    a_.(varargin{ii}) = varargin{ii+1};end% check active flag before starting mex functionif a_.active>0 && active<=0    try        a_.active = as('init', a_.blinkParams);    catch        a_.available = false;        a_.active = -1;        return    endelseif a_.active<=0 && active>0    a_.active = as('close');    returnend% if new mappings come in through set, work them outif ~isempty(a_.mappings)    a_ = putMap(a_, a_.mappings);    a_.mappings = [];end% clear auto fields, except graphics handles and query return valuesa_.degreeRect = [];a_.degPercm = [];% Generate constants for transforming eyetrac coordinates into% degrees of visual angle.  In debug or remote mode be, careful% to explicitly set the dXscreen properties so that they match% the remote hardware% dXscreen knows wheter to quote the local or remote screen size% quotes rectangle with origin at upper left, move origin to centera_.degreeRect = rGet('dXscreen','screenRect') ...    / rGet('dXscreen','pixelsPerDegree');a_.degreeRect(1:2) = a_.degreeRect(1:2) - a_.degreeRect(3:4)/2;% gain for x and -y coordinates from eyetracker serial outputa_.degPercm(2) = a_.degreeRect(4)/a_.aslRect(4);a_.degPercm(1) = a_.degreeRect(3)/a_.aslRect(3);% when showPlot changes, reset the device and figure.if any(strcmp(varargin(1:2:end), 'showPlot'))    a_ = reset(a_);end