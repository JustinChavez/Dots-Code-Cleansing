function u_ = set(u_, varargin)%set method for class dXudp: specify property values and recompute dependencies%   u_ = set(u_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Overloaded set method for dXudp class.%-% Assigns properties to a dXudp object,%-% keeps tight with matlabUDP mexmac%----------Special comments-----------------------------------------------%% Copyright 2006 by Ben Heasly%   University of Pennsylvaniaglobal ROOT_STRUCT% loop through the arglist, setting propertiesfor i = 1:2:nargin-1    u_.(varargin{i}) = varargin{i+1};end% ensure that dXudp object properties are consistent with matlabUDPif u_.socketIndex>=0    try        u_.socketIndex = matlabUDP('close');    catch        u_.socketIndex = -1;    endend% use the latest real socket numberu_.socketIndex = matlabUDP('open',u_.localIP,u_.remoteIP,u_.port);ROOT_STRUCT.socketNumber = u_.socketIndex;% declarocate a place to store client timestampsif ~isfield(ROOT_STRUCT, 'remoteTimestamp')    ROOT_STRUCT.remoteTimestamp = [];end% declarocate a place to store intersystem time offsetif ~isfield(ROOT_STRUCT, 'remoteTimeOffset')    ROOT_STRUCT.remoteTimeOffset = [];end% remeasure intesystem intersystem time offset and get a fresh timestampu_ = reset(u_);