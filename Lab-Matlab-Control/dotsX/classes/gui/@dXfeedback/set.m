function fb_ = set(fb_, varargin)%set method for class dXfeedback: specify property values and recompute dependencies%   fb_ = set(fb_, varargin)%%   All DotsX classes have set methods which allow properties for one or%   more instances to be specified, and dependent values recomputed.%%   Updated class instances are always returned.%%----------Special comments-----------------------------------------------%-%%-% Assign properties to dXfeedback object, recompute dependent%-% propertierties.%-%%----------Special comments-----------------------------------------------%%   See also set dXfeesback% Copyright 2006 by Benjamin Heasly%   University of Pennsylvaniaglobal ROOT_STRUCT% loop through the arglist, setting propertiesfor i = 1:2:nargin-1    fb_.(varargin{i}) = varargin{i+1};end% figure out how many text instances it needs.  This must be enough to% accomodate feedback for the 'total' task along side feedback for the% current task, so this number is 0 - 2*n.num_tot = 0;if isfield(ROOT_STRUCT, 'dXparadigm') && ~isempty(ROOT_STRUCT.dXparadigm)    % how many feedbacks are there for a dXparadigm?    num_tot = length(fieldnames(get(ROOT_STRUCT.dXparadigm(1), 'feedbackSelect')));    if isfield(ROOT_STRUCT, 'dXtask') && ~isempty(ROOT_STRUCT.dXtask)        % plus how many for a dXtask?        num_tot = num_tot ...            + length(fieldnames(get(ROOT_STRUCT.dXtask(1), 'feedbackSelect')));    else        % or just double the number for a dXparadigm        num_tot = 2*num_tot;    endelse    % or just call it 16    num_tot = 16;endnum_need = num_tot - length(fb_.dXtextInstances);if num_need > 0 && ~any(strcmp(ROOT_STRUCT.groups.names, fb_.groupName))    % play nice with the other groups    g = ROOT_STRUCT.groups.name;    % add with special rAdd flags:    %   call set = true    %   reuse = false    %   save arguments = true -- needed for reloading ROOT_STRUCT    tony = {fb_.groupName, false, true, false};    fb_.dXtextInstances = [fb_.dXtextInstances, rAdd( ...        'dXtext',   num_need, tony, ...        'x',        fb_.x, ...        'size', 	fb_.size, ...        'font',     fb_.font, ...        'bold',     fb_.bold, ...        'italic',	fb_.italic, ...        'underline',fb_.underline, ...        'outline',	fb_.outline)];end