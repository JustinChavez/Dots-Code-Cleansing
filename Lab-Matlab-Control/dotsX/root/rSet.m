function rSet(class_name, indices, varargin)%Set properties of objects belonging to a single class.%   rSet(class_name, indices, varargin)%%   rSet calls the overloaded set method for the class specified by the%   string class_name.  Indices should be a 1-by-N array of integers which%   each specify an active instance of class_name.  Varargin should be a%   list of property-value pairs.  Singular values will be applied to all%   instances specified by indices.  Values which are 1-by-N cell arrays%   will be dealt in order to each instance specified by indices.%%   If indices is empty, properties will be set for all active%   instances of class_name.%%   If neither indices nor varargin is provided, rSet will display a list%   of property names for objects of type class_name, along with the data%   type, acceptable range (if applicable), and default value for each%   property.%%   The following demonstates each mode of rSet.%%   % create two instances of the dXtext class%   rInit('debug');%   rAdd('dXtext', 2);%%   % display dXtext properties%   rSet('dXtext');%%   % set two different string values and one common color value%   rSet('dXtext', [], 'string', {'text one', 'text two'}, ...%       'color', [255, 0 255]);%%   % set only the first instance to be invisible%   rSet('dXtext', 1, 'visible', false);%%   See also rInit, dXtext, rSetMany, rSetTaskByname, rGet% Copyright 2005 by Joshua I. Gold%   University of Pennsylvaniaglobal ROOT_STRUCT% if no arguments (or just indices) given, return defaultsif nargin < 3    disp(sprintf('\t\t\t\t%s', class_name))    disp(sprintf('    Property\t\t Type\t\t Range\t\t Default'))    disp(sprintf('    --------\t\t ----\t\t -----\t\t -------'))    disp([cellstr(ROOT_STRUCT.classes.(class_name).fieldnames) ...        struct2cell(ROOT_STRUCT.classes.(class_name).types) ...        struct2cell(ROOT_STRUCT.classes.(class_name).ranges) ...        struct2cell(ROOT_STRUCT.classes.(class_name).defaults)])    returnend% Check list of indicesif isempty(indices)    % No indices given, call method-specific set     %   routine with ALL objects    ROOT_STRUCT.(class_name) = ...        set(ROOT_STRUCT.(class_name), varargin{:});else    % Indices given, call method-specific set     %   routine with given objects    ROOT_STRUCT.(class_name)(indices) = ...        set(ROOT_STRUCT.(class_name)(indices), varargin{:});end